{
    "long": "- Software Design Principles:\n  - Importance of quality design for software\n  - Design as a way to translate stakeholder requirements into software products\n  - Design as foundation for software engineering\n  - Risks of not having proper design (instability, difficulty testing)\n  - Qualified Design Characteristics: Correctness, Clarity, Completeness\n\n- SW Design Concepts:\n  - Cohesion: Design elements responsible for a single task\n  - Coupling: Measure of code structure interdependencies\n  - Importance of high cohesion and loose coupling\n\n- Object Oriented Concepts:\n  - Overview of SW Design Principles and Mobile Programming\n  - Representation of design for quality assessment\n  - Design provides blueprint for finished software products\n  - Final design evaluation based on correctness, clarity, completeness\n  - Example of design concepts: cohesion and coupling in code structure - Low Cohesion: code structures/modules/classes responsible for more than one function\n- High Coupling: design difficult to reuse and maintain due to many interdependencies\n- Object: represents an entity with state and behaviors\n- Class: template describing state and behavior supported by objects of its type\n- Encapsulation: protective barrier preventing random access to code and data\n- Benefit of Encapsulation: fields can be read-only/write-only, class has control over data storage\n- Inheritance: class can extend another, inheriting data members and methods\n- Creating a Subclass: extends properties/methods from superclass, can add new properties/methods\n- Overriding Methods: modifying superclass methods in subclasses\n- Inheritance Hierarchy: collection of subclasses descended from a common ancestor - Formula to find the area of a circle within a cylinder body: double findArea() method combines super.findArea(), getRadius(), Math.PI, and length\n- In Java programming, method overriding requires an exact match in argument list and return type\n- Overloading methods involves having multiple methods with the same name but different signatures\n- Methods marked final cannot be overridden\n- Overloading superclass methods is possible in Java, as shown by the example of a Horse class extending Animal and having different eat() methods - Polymorphism allows objects of different subclasses to be treated as objects of a single superclass\n- Example: defining area methods for shapes (circles, rectangles, triangles) using polymorphism\n- Using parent class reference to refer to child class objects\n- Example: overriding methods in subclasses and using superclass reference to refer to subclass objects\n- Parameter passing with polymorphism\n- Polymorphism determines method invocations at runtime based on object type\n- Abstraction involves simplifying objects to essential characteristics\n- Abstraction example: creating interfaces to denote common behaviors\n- Implementing abstraction using abstract classes or interfaces\n- Association in OOP: IS-A (Inheritance) and HAS-A (Association)\n- Association allows objects of one class to communicate with objects of another class\n- Aggregation is a loosely coupled relation where one class can exist without the other\n- Aggregation example: relationship between Country and Sportsperson classes allowing independent existence of both - Classes can be reused to create associations with other classes independently\n- Aggregation example:\n    - Class Person:\n        - Declares variables such as name and list of cars\n    - Class Car:\n        - Declares variables for brand, color, and model\n- Composition is a form of relation more tightly coupled\n- Known as Strong or Belongs-To association\n- Example association between College and Student\n    - College class with name and list of students\n    - Student class with name and college\n- Composition example:\n    - Class College:\n        - Private variables for name and student list\n    - Class Student:\n        - Private variable for name\n- Composition example:\n    - Class Company:\n        - Public variable for company name\n        - Private list of offices\n    - Class Office:\n        - Variables for name and address"
}