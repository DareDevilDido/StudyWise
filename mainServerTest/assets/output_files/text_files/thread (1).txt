Operating Systems
Chapter 4: ThreadsChapter 4: Threads
• Introduction
• Multicore Programming
• Multithreading Models
• Benefits of Threads
©Ahmed Hagag Operating Systems 2Introduction (1/6)
• A thread is a basic unit of CPU utilization; it comprises
a thread ID, a program counter, a register set, and a
stack.
• It shares with other threads belonging to the same
process its code section, data section, and other
operating-system resources, such as open files and
signals.
©Ahmed Hagag Operating Systems 3Introduction (2/6)
• Let's say, for example, A web browser might have one
thread display images or text while another thread
retrieves data from the network.
• The ideal solution to this problem is the seamless
execution of two or more sections of a program at the
same time. Threads allows us to do this.
©Ahmed Hagag Operating Systems 4Introduction (3/6)
©Ahmed Hagag Operating Systems 5Introduction (5/6)
• Multithreaded server architecture
©Ahmed Hagag Operating Systems 6Introduction (6/6)
• Finally, most operating-system kernels are now
multithreaded. Several threads operate in the kernel, and
each thread performs a specific task, such as managing
devices, managing memory, or interrupt handling.
©Ahmed Hagag Operating Systems 7Benefits of Threads
• Responsiveness – may allow continued execution if part
of process is blocked, especially important for user
interfaces.
• Resource Sharing – threads share resources of process,
easier than shared memory or message passing.
• Economy – cheaper than process creation, thread
switching lower overhead than context switching.
• Scalability – process can take advantage of
multiprocessor architectures.
©Ahmed Hagag Operating Systems 8Multicore Programming
• Multithreaded programming provides a mechanism for
more efficient use of these multicore or multiprocessor
systems.
Concurrent execution on single-core system
Parallelism on a multi-core system
©Ahmed Hagag Operating Systems 9Multithreading Models (1/6)
• Support for threads may be provided either at the user
level, for user threads, or by the kernel, for kernel
threads.
• User threads are supported above the kernel and are
managed without kernel support, whereas kernel threads
are supported and managed directly by the operating
system.
©Ahmed Hagag Operating Systems 10Multithreading Models (2/6)
• Ultimately, a relationship must exist between user
threads and kernel threads.
• We look at three common models:
 the one-to-one model,
 the many-to-one model, and
 the many-to-many model.
©Ahmed Hagag Operating Systems 11Multithreading Models (3/6)
One-to-One model (1/3)
©Ahmed Hagag Operating Systems 12Multithreading Models (3/6)
One-to-One model (2/3)
• The one-to-one model maps each user thread to a kernel
thread. It also allows multiple threads to run in parallel
on multiprocessors.
©Ahmed Hagag Operating Systems 13Multithreading Models (3/6)
One-to-One model (3/3)
• The only drawback to this model is that creating a user
thread requires creating the corresponding kernel thread.
Because the overhead of creating kernel threads can
burden the performance of an application, most
implementations of this model restrict the number of
threads supported by the system. Linux, along with the
family of Windows operating systems, implement the
one-to-one model.
©Ahmed Hagag Operating Systems 14Multithreading Models (4/6)
Many-to-One model
©Ahmed Hagag Operating Systems 15Multithreading Models (5/6)
Many-to-Many model (1/2)
©Ahmed Hagag Operating Systems 16Multithreading Models (5/6)
Many-to-Many model (2/2)
• Allows many user level threads to be mapped to many kernel threads.
• Allows the operating system to create a sufficient number of kernel
threads.
• The many-to-many model suffers from neither of these shortcomings:
• developers can create as many user threads as necessary, and the
corresponding kernel threads can run in parallel on a multiprocessor.
Also, when a thread performs a blocking system call, the kernel can
schedule another thread for execution.
©Ahmed Hagag Operating Systems 17Multithreading Models (6/6)
Two-level model
• Similar to Many-to-Many, except that it allows a user
thread to be bound to kernel thread.
©Ahmed Hagag Operating Systems 18